package unknow.server.servlet.http2.header;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import unknow.server.servlet.http2.header.Http2Headers.Entry;

public class Http2HeadersTest {

	public static final byte[] b(int... v) {
		byte[] b = new byte[v.length];
		for (int i = 0; i < b.length; i++)
			b[i] = (byte) (v[i] & 0xFF);
		return b;
	}

	public static Stream<Arguments> readHeaders() {
		Http2HeadersDecoder requestRaw = new Http2HeadersDecoder(4096);
		Http2HeadersDecoder responseRaw = new Http2HeadersDecoder(256);
		Http2HeadersDecoder requestHm = new Http2HeadersDecoder(4096);
		Http2HeadersDecoder responseHm = new Http2HeadersDecoder(256);
		//@formatter:off
		return Stream.of(
				Arguments.of( // literal with indexing
						new Http2HeadersDecoder(4096),
						new byte[][] { b(0x40,0x0a,0x63,0x75,0x73,0x74,0x6f,0x6d,0x2d,0x6b,0x65,0x79,0x0d,0x63,0x75,0x73,0x74,0x6f,0x6d,0x2d,0x68,0x65,0x61,0x64,0x65,0x72) },
						new Entry[]{ e("custom-key", "custom-header")},
						new Entry[]{ e("custom-key", "custom-header")}
				),
				Arguments.of( // literal without indexing
						new Http2HeadersDecoder(4096),
						new byte[][] { b(0x04,0x0c,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2f,0x70,0x61,0x74,0x68)},
						new Entry[]{ e(":path", "/sample/path")},
						new Entry[]{}
				),
				Arguments.of( // literal never indexing
						new Http2HeadersDecoder(4096),
						new byte[][] { b(0x10,0x08,0x70,0x61,0x73,0x73,0x77,0x6f,0x72,0x64,0x06,0x73,0x65,0x63,0x72,0x65,0x74)}, 
						new Entry[]{ e("password", "secret")},
						new Entry[]{}),
				Arguments.of( // indexed field
						new Http2HeadersDecoder(4096),
						new byte[][] { b(0x82)}, 
						new Entry[]{ e(":method", "GET")},
						new Entry[]{}),
				
				// request chain without huffman coding
				Arguments.of(
						requestRaw,
						new byte[][] { b(0x82,0x86,0x84,0x41,0x0f,0x77,0x77,0x77,0x2e,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63,0x6f,0x6d)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "http"), e(":path", "/"), e(":authority", "www.example.com")},
						new Entry[]{ e(":authority", "www.example.com")}),
				Arguments.of(
						requestRaw,
						new byte[][] { b(0x82,0x86,0x84,0xbe,0x58,0x08,0x6e,0x6f,0x2d,0x63,0x61,0x63,0x68,0x65)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "http"), e(":path", "/"), e(":authority", "www.example.com"),e("cache-control", "no-cache")},
						new Entry[]{ e("cache-control", "no-cache"), e(":authority", "www.example.com")}),
				Arguments.of(
						requestRaw,
						new byte[][] { b(0x82,0x87,0x85,0xbf,0x40,0x0a,0x63,0x75,0x73,0x74,0x6f,0x6d,0x2d,0x6b,0x65,0x79,0x0c,0x63,0x75,0x73,0x74,0x6f,0x6d,0x2d,0x76,0x61,0x6c,0x75,0x65)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "https"), e(":path", "/index.html"), e(":authority", "www.example.com"),e("custom-key", "custom-value")},
						new Entry[]{ e("custom-key", "custom-value"),e("cache-control", "no-cache"),e(":authority", "www.example.com")}),
				
				// request chain with huffman coding
				Arguments.of(
						requestHm,
						new byte[][] { b(0x82,0x86,0x84,0x41,0x8c,0xf1,0xe3,0xc2,0xe5,0xf2,0x3a,0x6b,0xa0,0xab,0x90,0xf4,0xff)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "http"), e(":path", "/"), e(":authority", "www.example.com")},
						new Entry[]{ e(":authority", "www.example.com")}),
				Arguments.of(
						requestHm,
						new byte[][] { b(0x82,0x86,0x84,0xbe,0x58,0x86,0xa8,0xeb,0x10,0x64,0x9c,0xbf)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "http"), e(":path", "/"), e(":authority", "www.example.com"),e("cache-control", "no-cache")},
						new Entry[]{ e("cache-control", "no-cache"), e(":authority", "www.example.com")}),
				Arguments.of(
						requestHm,
						new byte[][] { b(0x82,0x87,0x85,0xbf,0x40,0x88,0x25,0xa8,0x49,0xe9,0x5b,0xa9,0x7d,0x7f,0x89,0x25,0xa8,0x49,0xe9,0x5b,0xb8,0xe8,0xb4,0xbf)}, 
						new Entry[]{ e(":method", "GET"), e(":scheme", "https"), e(":path", "/index.html"), e(":authority", "www.example.com"),e("custom-key", "custom-value")},
						new Entry[]{ e("custom-key", "custom-value"),e("cache-control", "no-cache"),e(":authority", "www.example.com")}),
				
				// response chain without huffman coding
				Arguments.of(
						responseRaw,
						new byte[][] { b(0x48,0x03,0x33,0x30,0x32,0x58,0x07,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x61,0x1d,0x4d,0x6f,0x6e,0x2c,0x20,0x32,0x31,0x20,0x4f,0x63,0x74,0x20,0x32,0x30,0x31,0x33,0x20,0x32,0x30,0x3a,0x31,0x33,0x3a,0x32,0x31,0x20,0x47,0x4d,0x54,0x6e,0x17,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x77,0x77,0x77,0x2e,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63,0x6f,0x6d)}, 
						new Entry[]{ e(":status", "302"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("location", "https://www.example.com")},
						new Entry[]{ e("location", "https://www.example.com"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("cache-control", "private"),e(":status", "302")}),
				Arguments.of(
						responseRaw,
						new byte[][] { b(0x48,0x03,0x33,0x30,0x37,0xc1,0xc0,0xbf)}, 
						new Entry[]{ e(":status", "307"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("location", "https://www.example.com")},
						new Entry[]{ e(":status", "307"), e("location", "https://www.example.com"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("cache-control", "private")}),
				Arguments.of(
						responseRaw,
						new byte[][] { b(0x88,0xc1,0x61,0x1d,0x4d,0x6f,0x6e,0x2c,0x20,0x32,0x31,0x20,0x4f,0x63,0x74,0x20,0x32,0x30,0x31,0x33,0x20,0x32,0x30,0x3a,0x31,0x33,0x3a,0x32,0x32,0x20,0x47,0x4d,0x54,0xc0,0x5a,0x04,0x67,0x7a,0x69,0x70,0x77,0x38,0x66,0x6f,0x6f,0x3d,0x41,0x53,0x44,0x4a,0x4b,0x48,0x51,0x4b,0x42,0x5a,0x58,0x4f,0x51,0x57,0x45,0x4f,0x50,0x49,0x55,0x41,0x58,0x51,0x57,0x45,0x4f,0x49,0x55,0x3b,0x20,0x6d,0x61,0x78,0x2d,0x61,0x67,0x65,0x3d,0x33,0x36,0x30,0x30,0x3b,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x31)}, 
						new Entry[]{ e(":status", "200"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:22 GMT"), e("location", "https://www.example.com"), e("content-encoding", "gzip"), e("set-cookie", "foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1")},
						new Entry[]{ e("set-cookie", "foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1"),  e("content-encoding", "gzip"), e("date", "Mon, 21 Oct 2013 20:13:22 GMT")}),
				
				// response chain with huffman coding
				Arguments.of(
						responseHm,
						new byte[][] { b(0x48,0x82,0x64,0x02,0x58,0x85,0xae,0xc3,0x77,0x1a,0x4b,0x61,0x96,0xd0,0x7a,0xbe,0x94,0x10,0x54,0xd4,0x44,0xa8,0x20,0x05,0x95,0x04,0x0b,0x81,0x66,0xe0,0x82,0xa6,0x2d,0x1b,0xff,0x6e,0x91,0x9d,0x29,0xad,0x17,0x18,0x63,0xc7,0x8f,0x0b,0x97,0xc8,0xe9,0xae,0x82,0xae,0x43,0xd3)}, 
						new Entry[]{ e(":status", "302"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("location", "https://www.example.com")},
						new Entry[]{ e("location", "https://www.example.com"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("cache-control", "private"),e(":status", "302")}),
				Arguments.of(
						responseHm,
						new byte[][] { b(0x48,0x83,0x64,0x0e,0xff,0xc1,0xc0,0xbf)}, 
						new Entry[]{ e(":status", "307"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("location", "https://www.example.com")},
						new Entry[]{ e(":status", "307"), e("location", "https://www.example.com"), e("date", "Mon, 21 Oct 2013 20:13:21 GMT"), e("cache-control", "private")}),
				Arguments.of(
						responseHm,
						new byte[][] { b(0x88,0xc1,0x61,0x1d,0x4d,0x6f,0x6e,0x2c,0x20,0x32,0x31,0x20,0x4f,0x63,0x74,0x20,0x32,0x30,0x31,0x33,0x20,0x32,0x30,0x3a,0x31,0x33,0x3a,0x32,0x32,0x20,0x47,0x4d,0x54,0xc0,0x5a,0x04,0x67,0x7a,0x69,0x70,0x77,0x38,0x66,0x6f,0x6f,0x3d,0x41,0x53,0x44,0x4a,0x4b,0x48,0x51,0x4b,0x42,0x5a,0x58,0x4f,0x51,0x57,0x45,0x4f,0x50,0x49,0x55,0x41,0x58,0x51,0x57,0x45,0x4f,0x49,0x55,0x3b,0x20,0x6d,0x61,0x78,0x2d,0x61,0x67,0x65,0x3d,0x33,0x36,0x30,0x30,0x3b,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x31)}, 
						new Entry[]{ e(":status", "200"), e("cache-control", "private"), e("date", "Mon, 21 Oct 2013 20:13:22 GMT"), e("location", "https://www.example.com"), e("content-encoding", "gzip"), e("set-cookie", "foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1")},
						new Entry[]{ e("set-cookie", "foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1"),  e("content-encoding", "gzip"), e("date", "Mon, 21 Oct 2013 20:13:22 GMT")})
				); //@formatter:on
	}

	@ParameterizedTest
	@MethodSource
	public void readHeaders(Http2HeadersDecoder h, byte[][] data, Entry[] headers, Entry[] table) throws IOException {
		Map<String, String> r = new HashMap<>();
		for (byte[] b : data)
			h.decode(ByteBuffer.wrap(b), r::put);

		assertEquals(table.length, h.dynamic.size());
		int i = 0;
		for (Entry e : h.dynamic)
			assertEquals(table[i++], e);

		assertEquals(headers.length, r.size());
		for (Entry e : headers)
			assertEquals(e.value(), r.get(e.name()));
	}

	private static final Entry e(String n, String v) {
		return new Entry(n, v);
	}
}
